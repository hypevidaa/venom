"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Network = void 0;
const everscale_inpage_provider_1 = require("everscale-inpage-provider");
const nodejs_1 = require("everscale-standalone-client/nodejs");
const boc_1 = require("./lockliftWallet/boc");
const constants_1 = require("../../constants");
class Network {
    constructor(proxyNetwork, signer, accountStorage, provider) {
        this.proxyNetwork = proxyNetwork;
        this.signer = signer;
        this.accountStorage = accountStorage;
        this.provider = provider;
        this.insertWallet = (address) => {
            this.proxyNetwork.setAccount(address, boc_1.LOCKLIFT_WALLET_BOC, "accountStuffBoc");
            const lockliftWallet = new nodejs_1.MsigAccount({
                address,
                type: "SafeMultisig",
                publicKey: this.signer.publicKey,
            });
            this.accountStorage.addAccount(lockliftWallet);
            return lockliftWallet;
        };
        this.insertAccount = ({ boc, address, abi, type, }) => {
            this.proxyNetwork.setAccount(address, boc, type || "accountStuffBoc");
            return new this.provider.Contract(abi, address);
        };
        this.getWallet = (id) => {
            const address = getLockliftWalletAddress(id.toString());
            return this.insertWallet(new everscale_inpage_provider_1.Address(address));
        };
        this.getWallets = (count) => {
            return Array.from({ length: count }, (_, i) => {
                return this.getWallet(i);
            });
        };
    }
}
exports.Network = Network;
const getLockliftWalletAddress = (id = "0") => {
    const [, addressTail] = constants_1.zeroAddress.toString().split(":");
    return `${0}:777${addressTail}`.slice(0, constants_1.zeroAddress.toString().length - id.length).concat(id);
};
